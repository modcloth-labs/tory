package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func embedded_txt() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2a, 0x2e,
		0xc8, 0x07, 0x81, 0xec, 0x4a, 0x2e, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
		0x05, 0xae, 0x4d, 0xa1, 0x0a, 0x00, 0x00, 0x00,
	},
		"embedded.txt",
	)
}

func favicon_ico() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x62, 0x60,
		0x60, 0x04, 0x42, 0x01, 0x01, 0x01, 0x06, 0x10, 0xd0, 0x60, 0x64, 0x60,
		0x10, 0x03, 0xd1, 0x40, 0x0c, 0x12, 0x51, 0x60, 0x00, 0xc9, 0xb3, 0x80,
		0xe5, 0x1a, 0x18, 0x10, 0x40, 0x00, 0x4a, 0x7f, 0xfd, 0xf0, 0x1a, 0x4c,
		0xff, 0xea, 0x12, 0x64, 0x10, 0x17, 0x13, 0x65, 0x98, 0x53, 0x1b, 0xc3,
		0xc0, 0x97, 0xd9, 0xc0, 0xf0, 0xe2, 0xc9, 0x7d, 0x06, 0x62, 0x80, 0x8b,
		0x8b, 0x93, 0x92, 0x92, 0x8a, 0x8b, 0x0b, 0x82, 0x56, 0x02, 0x02, 0x6c,
		0xb4, 0xab, 0x8b, 0x4b, 0x08, 0x0a, 0x1d, 0x1a, 0x0a, 0xa4, 0x45, 0x5c,
		0xc0, 0xc0, 0x51, 0xd0, 0xc5, 0xcd, 0xc5, 0x25, 0xc5, 0x45, 0x50, 0x50,
		0xc4, 0xcd, 0xd8, 0x38, 0xc5, 0x51, 0x10, 0xc8, 0x07, 0xd2, 0x40, 0x3e,
		0x44, 0x1e, 0x48, 0x3b, 0xb0, 0x38, 0xb0, 0x80, 0xe4, 0x41, 0x34, 0x50,
		0x5e, 0x10, 0x22, 0x4c, 0xc8, 0x7d, 0x0d, 0xc0, 0xf0, 0x38, 0xc0, 0xcc,
		0xc0, 0xf0, 0x80, 0x1d, 0x42, 0xc3, 0x30, 0x88, 0xff, 0x81, 0x9f, 0x81,
		0x01, 0x10, 0x00, 0x00, 0xff, 0xff, 0x92, 0x72, 0x0a, 0x28, 0x3e, 0x01,
		0x00, 0x00,
	},
		"favicon.ico",
	)
}

func index_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x6c, 0x8e,
		0x31, 0x12, 0x02, 0x31, 0x08, 0x45, 0x7b, 0x4f, 0x81, 0x7b, 0x00, 0x77,
		0xec, 0x91, 0x46, 0xad, 0xb5, 0xb0, 0xb1, 0x24, 0xc2, 0x4e, 0x32, 0x93,
		0x8c, 0x19, 0xa5, 0xd8, 0xbd, 0xbd, 0x89, 0xb8, 0x9d, 0x15, 0x1f, 0xf8,
		0xef, 0x03, 0x6e, 0x4f, 0x97, 0xe3, 0xed, 0x7e, 0x3d, 0x43, 0xb4, 0x92,
		0x69, 0x83, 0x5e, 0x00, 0x30, 0x2a, 0x4b, 0x17, 0x4d, 0x5a, 0xb2, 0xac,
		0x54, 0x78, 0x09, 0xfa, 0x36, 0xb6, 0xf4, 0x00, 0x9d, 0xb9, 0xd4, 0xac,
		0x38, 0xfa, 0xaa, 0xfb, 0xc7, 0x15, 0xc0, 0xf0, 0x94, 0xe5, 0x47, 0xc6,
		0xfd, 0x7f, 0xac, 0xcd, 0xdd, 0x50, 0x09, 0x19, 0xe2, 0x4b, 0xa7, 0xc3,
		0xa0, 0x25, 0xa8, 0x88, 0xca, 0xce, 0x66, 0x1b, 0x68, 0xed, 0x60, 0x4a,
		0x1d, 0x60, 0xc2, 0xb1, 0xfa, 0x1d, 0x8f, 0x6f, 0x19, 0xdf, 0x4f, 0x3f,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x55, 0xd9, 0x75, 0xc1, 0x00, 0x00,
		0x00,
	},
		"index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"embedded.txt": embedded_txt,
	"favicon.ico": favicon_ico,
	"index.html": index_html,
}
